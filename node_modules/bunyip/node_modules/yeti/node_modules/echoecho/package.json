{
  "name": "echoecho",
  "description": "Simple testing echo responses to HTTP requests",
  "author": {
    "name": "Dav Glass",
    "email": "davglass@gmail.com"
  },
  "version": "0.1.7",
  "devDependencies": {
    "vows": "*",
    "yui-lint": "~0.1.1",
    "jshint": "~0.9.0",
    "istanbul": "~0.1.8"
  },
  "scripts": {
    "pretest": "jshint --config ./node_modules/yui-lint/jshint.json ./lib/*.js",
    "test": "istanbul cover --print both -- vows --spec ./tests/*.js"
  },
  "main": "./lib/echo.js",
  "keywords": [
    "echo",
    "http",
    "testing",
    "responses"
  ],
  "bugs": {
    "url": "http://github.com/davglass/echoecho/issues"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "https://github.com/davglass/echoecho/blob/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/davglass/echoecho.git"
  },
  "readme": "EchoEcho\n========\n\nSimple server reponse echoer to help when testing.\n\nThe idea of `echoecho` is to provide a relative URL listener\nfor any node `http` object and have it return a predictable\nresponse.\n\nInstall\n-------\n\n    npm i echoecho\n\n\nBuild Status\n------------\n\n[![Travis Build Status](https://secure.travis-ci.org/davglass/echoecho.png?branch=master)](http://travis-ci.org/davglass/echoecho)\n\n[Code Coverage Report](http://davglass.github.com/echoecho/)\n\nDefault Routes\n--------------\n\n* `get` - GET Request\n* `post` - POST Request with data\n* `put` - PUT with data\n* `delete` - DELETE with data\n* `status` - Special status route `echo/status/403` returns a `403`, all `http.STATUS_CODES` supported\n* `delay` - Special delay route `echo/delay/2` returns a 200 delayed by 2 seconds.\n* `json` - Send query parameters or POST parameters and get them back as JSON\n* `jsonp` - Send query parameters or POST parameters and get them back as JSON (pass a GET param of `callback=[yourcallback]`\n\nDelayed Responses\n-----------------\n\nYou can delay an `echoecho` request with the `delay` route followed by a value\nin seconds (e.g., `/delay/3`) or a range in seconds (e.g., `/delay/1-3`). Given\na range, the response will be delayed by a random period of time within the\nrange.\n\nYou can also delay any route by prepending the delay route (e.g.,\n`/delay/2/get`, `/delay/1-2/json?response={\"hello\":\"world\"}`, etc).\n\nCustomized Responses\n--------------------\n\nYou can customize the response content for any route (except for `status`)\nby specifying either a `response` or `file` query parameter.\n\nThe `response` query parameter lets you specify the custom response in the URL,\nwhereas the `file` query parameter will attempt to read a file on the server.\n\nThe above ways of specifying custom responses will also work with any delayed\nroute.\n\nUsing in Your Server\n--------------------\n\n__I recommend using it with Express/Connect to get a properly parsed body for POST/PUT requests__\n\nThere are 3 things you need to do inside the Node server providing these tests:\n\n* Tell `echoecho` your relative paths to scan\n* Check to see if `echoecho` can repond to a request\n* Have `echoecho` serve the request\n\nHere's a simple example, assuming your tests serve from `/build/tests/mine/index.html`\n\n```\n\n//Prepping once\n//Tell echoecho to serve from these base paths\nechoecho.paths([\n    '/build/tests/mine/index.html' //echoecho will serve from /build/tests/mine/\n]);\n\n//From inside your request handler, like http.createServer or express.createServer\n\nif (echoecho.handle(req.url)) { //Can echoecho respond to this?\n    echoecho.serve(req, res); //Pass in the request and response objects and echoecho will take it from here\n} else {\n    //throw your 404\n}\n```\n\nInstantiate an EchoEcho object:\n\n```\nvar ee = new echoecho.EchoEcho({\n    paths: [] //base paths\n});\n\n//Like above\nee.handle();\nee.serve();\n\n```\n\nHandling all requests with /echo/ in the URL:\n\n```\n\nvar ee = new require('echoecho').EchoEcho({\n    all: true;\n});\n\n//Like above\nee.handle();\nee.serve();\n```\n\nUsing in Your Tests\n-------------------\n\nNow that your server is accepting `echoecho` responses, you can start using them in your HTML tests like this:\n\nFrom index.html you can use relative URL's that start with `echo` and then contain your route.\n\n* `echo/status/200`\n* `echo/status/500`\n* `echo/get?foo=bar&good=bad`\n* `echo/post`\n\nThat's it, `echoecho` should return what it was given\n\nExtending\n---------\n\n`echoecho` has an internal \"scheme\" that you can add methods to inside your personal server.\n\n`echoecho.scheme` contains an Object liternal of paths as keys and function handlers as values.\n\n```\n\nechoecho.scheme.get = function(req, res) { ... };\n\n```\n\nRight now, these are the route in the echo router: `echo/ROUTE/etc`, I may end up added regex support for this\nbut for the inital version I didn't need them.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/davglass/echoecho",
  "_id": "echoecho@0.1.7",
  "_from": "echoecho@~0.1.6"
}
